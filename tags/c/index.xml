<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Zink&#39;s Blog</title>
    <link>https://zinkwu.blog/tags/c/</link>
    <description>Recent content in C on Zink&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sat, 11 Feb 2023 13:59:54 +0000</lastBuildDate><atom:link href="https://zinkwu.blog/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>指针</title>
      <link>https://zinkwu.blog/articles/pointer-of-c/</link>
      <pubDate>Sat, 11 Feb 2023 13:59:54 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/pointer-of-c/</guid>
      <description>前言 本月开始学习c语言，教材使用的是《C程序设计语言》第二版，不推荐基础不好的人群食用这本书，当然如果你心态良好也可以试试，我在阅读第五章——指针的时候可谓是痛苦万分，配合ChatGPT终于是基本入门了指针这个概念。
指针是什么？ 指针是一种可以保存变量地址/内存地址的变量。
我们知道程序中的变量是存储在计算机内存中的，在现代计算机中1 byte = 8 bit，每个字节都有对饮的内存地址，在高级语言中，指针这个概念被遮蔽了，我们只能通过变量名来访问它存储的值，因为我们没办法获取并存储它的内存地址。
而 C 将这项能力交给了程序员！
1 2 3 4 5 6 7 8 9 int *p; // 定义一个指针变量 int i = 1; // 定义一个 int 类型的变量 p = &amp;amp;i; // 通过 &amp;amp; 运算符得到 i 的内存地址并赋值给 p printf(&amp;#34;%d&amp;#34;, *p); // 1 *p += 1; printf(&amp;#34;%d&amp;#34;, *p); // 2 printf(&amp;#34;%d&amp;#34;, i); // 2 语句1中声明了一个指针变量（或者指针），类型 *变量名 这个形式可以声明一个指向该「类型」的指针变量。语句2声明了一个整型变量i，语句3中通过&amp;amp;运算符计算出变量i的内存地址并赋值给指针变量p。此时可以将*p看作是i的别名。
指针与数组 在C语言中，函数的参数传递都是值传递。
1 2 3 4 5 6 7 8 int plus_one(int x){ return ++x; } int a = 1; plus_one(a); printf(&amp;#34;%d&amp;#34;, a); // 1 在上面的代码中，定义了一个函数，该函数接受一个int类型参数，并将其+1后的值返回。接着调用这个函数，将a作为变量传入其中，稍后将a的值打印出来，我们会发现a的值依旧是1。即我们传入的a只是a存储的值的副本，并不是a的内存地址。</description>
    </item>
    
  </channel>
</rss>
