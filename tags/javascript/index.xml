<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Javascript on Rush</title>
    <link>https://zinkwu.me/tags/javascript/</link>
    <description>Recent content in Javascript on Rush</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>zh-Hans</language>
    <copyright>2024 by Rush</copyright>
    <lastBuildDate>Thu, 10 Mar 2022 11:32:49 +0000</lastBuildDate>
    <atom:link href="https://zinkwu.me/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event Loop Promise async/await 总结</title>
      <link>https://zinkwu.me/posts/event-loop-promise-async-await/</link>
      <pubDate>Thu, 10 Mar 2022 11:09:39 +0000</pubDate>
      <guid>https://zinkwu.me/posts/event-loop-promise-async-await/</guid>
      <description>&lt;h2 id=&#34;同步任务&#34;&gt;同步任务&lt;/h2&gt;
&lt;p&gt;因为 JavaScript 是单线程的，所以同步任务只能在主线程上排队执行，并且只有当前一个任务完成才能执行下一个任务&lt;/p&gt;
&lt;p&gt;当 JavaScript 运行时，每个函数的执行都会进入调用栈（Call Stack）中，当前函数执行完毕后将其移出栈，然后执行下一个函数，如果其中有非常耗时的函数执行，那么调用栈就阻塞了，后面的任务只能一直处于等待状态无法执行，且此时 UI 对面任何用户操作都不会响应，看起来就像程序崩溃了一样。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们有了异步任务。&lt;/p&gt;
&lt;h2 id=&#34;异步任务&#34;&gt;异步任务&lt;/h2&gt;
&lt;p&gt;常见的异步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.resolve().then()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch.then()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异步任务在执行之前不会进入调用栈，它进入事件循环队列（Event Loop Queue），当主线程执行完毕后，且异步时机到了，就会将事件循环队列中的任务推入调用栈中执行。&lt;/p&gt;
&lt;h2 id=&#34;event-loop&#34;&gt;Event Loop&lt;/h2&gt;
&lt;p&gt;Event Loop 的工作非常简单，它只是监控调用栈和回调队列（包含每个事件对应的回调函数，比如 click 的回调函数）。如果调用栈为空，Event Loop 将队列中的第一个任务&lt;strong&gt;移除并推送&lt;/strong&gt;到调用栈。&lt;/p&gt;
&lt;p&gt;从 ES6 开始，Event Loop 处理异步也分两种，在&lt;code&gt;Macrotask&lt;/code&gt;中处理&lt;code&gt;setTimeout&lt;/code&gt;这类的，在&lt;code&gt;Microtask&lt;/code&gt;中处理&lt;code&gt;Promise&lt;/code&gt;这类的。它会优先处理&lt;code&gt;Microtask&lt;/code&gt;中的任务&lt;/p&gt;
&lt;p&gt;browser event model
&lt;img loading=&#34;lazy&#34; src=&#34;promise/event-model.png&#34; alt=&#34;promise constructor&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;nodejs-中的-event-loop&#34;&gt;Node.js 中的 Event Loop&lt;/h2&gt;
&lt;p&gt;Node.js 中的 Event Loop 分为 6 个阶段，依次是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timers 定时器
&lt;ul&gt;
&lt;li&gt;这个阶段执行已被&lt;code&gt;setTimeout()&lt;/code&gt;和&lt;code&gt;setInterval()&lt;/code&gt;调度的回调函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pending callbacks 待定回调
&lt;ul&gt;
&lt;li&gt;执行延迟到下一个循环迭代的I/O回调&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;idle, prepare
&lt;ul&gt;
&lt;li&gt;Node.js 系统内部使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;poll 轮询
&lt;ul&gt;
&lt;li&gt;检索新的 I/O 事件；执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 &lt;code&gt;setImmediate()&lt;/code&gt; 调度的之外），其余情况 node 将在适当的时候在此阻塞（等待）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;check 检测
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setImmediate()&lt;/code&gt;回调函数在这里执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;close callback 关闭的回调函数
&lt;ul&gt;
&lt;li&gt;一些关闭的回调函数，如：&lt;code&gt;sockt.on(&#39;close&#39;, ...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;process.nextTick()&lt;/code&gt;的回调会在每个阶段结束之前调用。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>什么是继承？</title>
      <link>https://zinkwu.me/posts/whats-inheritance/</link>
      <pubDate>Thu, 10 Feb 2022 18:19:40 +0000</pubDate>
      <guid>https://zinkwu.me/posts/whats-inheritance/</guid>
      <description>强化关于继承的知识</description>
    </item>
    <item>
      <title>Call &amp; Apply &amp; Bind实现</title>
      <link>https://zinkwu.me/posts/call-apply-bind-implement/</link>
      <pubDate>Tue, 24 Sep 2019 10:33:29 +0800</pubDate>
      <guid>https://zinkwu.me/posts/call-apply-bind-implement/</guid>
      <description>Call、Apply、Bind实现</description>
    </item>
    <item>
      <title>Input中如何处理中文输入防抖</title>
      <link>https://zinkwu.me/posts/chinese-input-debounce/</link>
      <pubDate>Mon, 23 Sep 2019 10:35:18 +0800</pubDate>
      <guid>https://zinkwu.me/posts/chinese-input-debounce/</guid>
      <description>Input中如何处理中文输入防抖</description>
    </item>
    <item>
      <title>这一次，我一定会搞定 This ！</title>
      <link>https://zinkwu.me/posts/about-this/</link>
      <pubDate>Mon, 16 Sep 2019 10:36:19 +0800</pubDate>
      <guid>https://zinkwu.me/posts/about-this/</guid>
      <description>JavaScript中的this规则</description>
    </item>
    <item>
      <title>防抖和节流</title>
      <link>https://zinkwu.me/posts/debounce-throttle/</link>
      <pubDate>Tue, 06 Aug 2019 10:37:38 +0800</pubDate>
      <guid>https://zinkwu.me/posts/debounce-throttle/</guid>
      <description>防抖和节流的代码实现</description>
    </item>
    <item>
      <title>JavaScript的深浅拷贝</title>
      <link>https://zinkwu.me/posts/js-deep-and-shallow-clone/</link>
      <pubDate>Wed, 24 Jul 2019 10:38:27 +0800</pubDate>
      <guid>https://zinkwu.me/posts/js-deep-and-shallow-clone/</guid>
      <description>深拷贝浅拷贝知识点笔记</description>
    </item>
  </channel>
</rss>
