<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript on Zink&#39;s Blog</title>
    <link>https://zinkwu.blog/tags/javascript/</link>
    <description>Recent content in JavaScript on Zink&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 10 Mar 2022 11:09:39 +0000</lastBuildDate><atom:link href="https://zinkwu.blog/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Event Loop Promise async/await 总结</title>
      <link>https://zinkwu.blog/articles/event-loop-promise-async-await/</link>
      <pubDate>Thu, 10 Mar 2022 11:09:39 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/event-loop-promise-async-await/</guid>
      <description>同步任务 因为 JavaScript 是单线程的，所以同步任务只能在主线程上排队执行，并且只有当前一个任务完成才能执行下一个任务
当 JavaScript 运行时，每个函数的执行都会进入调用栈（Call Stack）中，当前函数执行完毕后将其移出栈，然后执行下一个函数，如果其中有非常耗时的函数执行，那么调用栈就阻塞了，后面的任务只能一直处于等待状态无法执行，且此时 UI 对面任何用户操作都不会响应，看起来就像程序崩溃了一样。
为什么解决这个问题，我们有了异步任务
异步任务 常见的异步：
setTimeout() setInterval() Promise.resolve().then() fetch.then() 异步任务在执行之前不会进入调用栈，它进入事件循环队列（Event Loop Queue），当主线程执行完毕后，且异步时机到了，就会将事件循环队列中的任务推入调用栈中执行。
Event Loop Event Loop 的工作非常简单，它只是监控调用栈和回调队列（包含每个事件对应的回调函数，比如 click 的回调函数）。如果调用栈为空，Event Loop 将队列中的第一个任务移除并推送到调用栈。
从 ES6 开始，Event Loop 处理异步也分两种，在Macrotask中处理setTimeout这类的，在Microtask中处理Promise这类的。它会优先处理Microtask中的任务
browser event model Node.js 中的 Event Loop Node.js 中的 Event Loop 分为 6 个阶段，依次是：
timers 定时器 这个阶段执行已被setTimeout()和setInterval()调度的回调函数 pending callbacks 待定回调 执行延迟到下一个循环迭代的I/O回调 idle, prepare Node.js 系统内部使用 poll 轮询 检索新的 I/O 事件；执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 setImmediate() 调度的之外），其余情况 node 将在适当的时候在此阻塞（等待） check 检测 setImmediate()回调函数在这里执行 close callback 关闭的回调函数 一些关闭的回调函数，如：sockt.</description>
    </item>
    
    <item>
      <title>什么是继承？</title>
      <link>https://zinkwu.blog/articles/whats-inheritance/</link>
      <pubDate>Thu, 10 Feb 2022 18:19:40 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/whats-inheritance/</guid>
      <description>要理解继承，首先需要理解原型链
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function Person(name, age, gender){ this.name = name this.age = age this.gender = gender } Person.prototype.hi = function (){ console.log(`Hi, I&amp;#39;m ${this.name}`) } let f = new Person(&amp;#39;zoe&amp;#39;, 18, &amp;#39;female&amp;#39;) f.__proto__ === Person.prototype // true，ES5写法 Object.getPrototypeOf(f) === Person.prototype // true，ES6写法, __proto__ 是浏览器厂商私建 Person.prototype.__proto__ === Object.prototype // true 首先定义几个基本名词：
实例对象：通过new xxx出来的对象叫做实例对象 构造函数：如上方代码中的Person，一般以大写字母开头命名 - __proto__：ES6 之前，没有明确访问原型的方法，只能通过__proto__来访问，它的作用就是找到实例对象的原型 prototype：原型，是构造函数的一个属性 constructor：构造函数，写过 Java 这类 oop 的同学应该不陌生，这个在 ES5 中不经常接触到，ES6 中的 Class 经常用到， 然后通过上面的代码，我们可以得到这样的公式：</description>
    </item>
    
    <item>
      <title>Call &amp; Apply &amp; Bind实现</title>
      <link>https://zinkwu.blog/articles/call-apply-bind-implement/</link>
      <pubDate>Tue, 24 Sep 2019 10:33:29 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/call-apply-bind-implement/</guid>
      <description>&amp;lt;code&amp;gt;call&amp;lt;/code&amp;gt; &amp;amp;amp;&amp;amp;amp; &amp;lt;code&amp;gt;apply&amp;lt;/code&amp;gt; &amp;amp;amp;&amp;amp;amp; &amp;lt;code&amp;gt;bind&amp;lt;/code&amp;gt; 的作用 call、apply、bind的作用都是改变函数的 this 指向
call：call 的第一个参数就是对函数绑定的 this，为一个对象，后面的参数是函数调用时所需要的参数 apply：apply 只接受两个参数，第一个与 call 相同，第二个参数是为数组，内容是函数调用所需要的参数 bind：bind 与 call作用相同，不过 bind 会返回一个新的函数，第一个参数之后的参数将绑定原函数的参数。 实现 &amp;lt;code&amp;gt;call&amp;lt;/code&amp;gt; 先来看看原生call的使用方法
1 2 3 4 5 6 7 8 9 10 11 let obj = { a: 1 } function fn(){ console.log(this.a) } fn() // undefined fn.call(obj) // 1 call 是如何将 this 绑定到 obj 上的呢？ 我们换一种思路，先看下面的代码
1 2 3 4 5 6 7 8 let obj = { a: 1, fn(){ console.</description>
    </item>
    
    <item>
      <title>Input中如何处理中文输入防抖</title>
      <link>https://zinkwu.blog/articles/chinese-input-debounce/</link>
      <pubDate>Mon, 23 Sep 2019 10:35:18 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/chinese-input-debounce/</guid>
      <description>防抖 函数防抖和节流，都是控制事件触发频率的方法。具体实现可以看我的这篇文章
input 如何处理中文输入 如果只是单纯的使用 input 事件来监听 input 值的改变，那么每次敲击键盘，输入一个字母都会触发 input 事件，其实我们想要的是获取用户输入的中文再进行后续操作。
我们可以假象一下，输入中文时的字母都是预输入，只有当选择候选词之后，input得到的值才是我们想要的。
现在，向大家介绍两个新的 DOM 事件：compositionstart、compositionend
compositionstart：compositionstart 事件触发于一段文字的输入之前 compositionend：当文本段落的组成完成或取消时, compositionend 事件将被触发 1 &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 let inputElement = document.querySelector(&amp;#39;input&amp;#39;) let canRun = true inputElement.addEventListener(&amp;#39;compositionstart&amp;#39;, function(){ console.log(&amp;#39;start&amp;#39;) canRun = false }) inputElement.addEventListener(&amp;#39;compositionend&amp;#39;, function(){ console.</description>
    </item>
    
    <item>
      <title>这一次，我一定会搞定 This ！</title>
      <link>https://zinkwu.blog/articles/about-this/</link>
      <pubDate>Mon, 16 Sep 2019 10:36:19 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/about-this/</guid>
      <description>迫于 迫于在写 React 事件处理中的 this 时，写到 this 突然卡壳了，一顿冷静分析之后发现自己对于 this 的理解又忘了一些，于是痛定思痛，重新读了 《You-Dont-Know-JS》中关于 this 的文章。
函数的执行环境 首先上一段代码
1 2 3 4 5 6 7 8 9 10 11 12 function fn(){ console.log(this.a) } let obj = { a: 1, fn: fn } var a = &amp;#39;window&amp;#39; fn() //window obj.fn() //1 首先我们要明确一点 ，this 不是编写代码时就绑定的，而是运行时绑定的。 比如 fn() 在调用时，所处的环境是 global，所以他的 this 就是 window 而 obj.fn() 在调用时，所处的环境是在对象 obj 内，所以他的 this 指向 obj 对象
当一个函数被调用时，会建立一个称为执行环境的活动记录。这个记录包含函数是从何处（调用栈 —— call-stack）被调用的，函数是 如何 被调用的，被传递了什么参数等信息。这个记录的属性之一，就是在函数执行期间将被使用的 this 引用。</description>
    </item>
    
    <item>
      <title>防抖和节流</title>
      <link>https://zinkwu.blog/articles/debounce-throttle/</link>
      <pubDate>Tue, 06 Aug 2019 10:37:38 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/debounce-throttle/</guid>
      <description>什么是防抖？如何实现？ 动作绑定事件，动作发生后一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一定时间再触发事件。
实现：每次触发事件时都取消之前的延时调用方法。
1 2 3 4 5 6 7 8 9 function debounce(fn) { let timer = null; return function() { clearTimeout(timer); timer = setTimeout(() =&amp;gt; { fn.apply(this, arguments) }, 500) }; } 什么是节流？如何实现？ 动作发生后一段时间后触发事件，在这段时间内，如果动作又发生，则无视该动作，直到事件执行完后，才能重新触发。
实现：每次触发事件时都判断当前是否有等待执行的延时函数，如果有，则无视该次动作。
1 2 3 4 5 6 7 8 9 10 11 function throttle(fn) { let canRun = true; return function() { if (!canRun) return; canRun = false; setTimeout(() =&amp;gt; { fn.apply(this, arguments); canRun = true; }, 500); }; } 区别 防抖和节流的区别在于：</description>
    </item>
    
    <item>
      <title>JavaScript的深浅拷贝</title>
      <link>https://zinkwu.blog/articles/js-deep-and-shallow-clone/</link>
      <pubDate>Wed, 24 Jul 2019 10:38:27 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/js-deep-and-shallow-clone/</guid>
      <description>JavaScript的数据类型 JS中有7种数据类型：String、Number、Boolean、Null、Undefined、对象以及ES6新增的Symbol。 由于目前还未深入了解过Symbol，所以此次不讨论Symbol。 其中6种为基本类型（或叫做简单数据类型）和1种引用类型（复杂数据类型）。
基本类型 String Number Boolean Null Undefined 引用类型 对象 不同数据类型在内存中如何存储？ 我们将内存分为栈（Stack）内存和堆（Heap）内存 基本类型以固定大小的空间存在与栈内存中，当基本类型发生值的拷贝时，目标变量会得到原始变量的值的副本。
1 2 let a = 1 let b = a //1 引用类型的值是对象，保存在堆内存中，引用类型的变量的值并不是值的本身，而是这个值在堆内存中的地址（也有说法为指针，不过我个人觉得地址容易理解）。当引用类型发生值的拷贝的时候，实际上目标变量得到的是原始变量的值的地址。
1 2 3 4 5 6 7 let obj1 = { name: &amp;#34;jack&amp;#34; } /* 此时{name: &amp;#34;jack&amp;#34;}这个对象存在于堆内存中，我们假设他的地址是218 */ let obj2 = obj1 //在这个赋值操作中，传递的其实是对象在内存中的地址 浅拷贝 1 2 3 4 5 6 7 8 9 10 let data = { name: &amp;#34;jack&amp;#34;, age: 18, gender: &amp;#34;male&amp;#34; } let copyDate = data copyDate === data //true copyDate.</description>
    </item>
    
  </channel>
</rss>
