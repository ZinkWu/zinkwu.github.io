<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on Zink&#39;s Blog</title>
    <link>https://zinkwu.blog/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on Zink&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sat, 17 Jul 2021 10:09:51 +0800</lastBuildDate><atom:link href="https://zinkwu.blog/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>合并两个有序链表</title>
      <link>https://zinkwu.blog/articles/metge-two-sorted-linked-list/</link>
      <pubDate>Sat, 17 Jul 2021 10:09:51 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/metge-two-sorted-linked-list/</guid>
      <description>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
ex1:
输入：l1 = [1,2,4], l2 = [1,3,4] 输出：[1,1,2,3,4,4] tip:
两个链表的节点数目范围是 [0, 50] -100 &amp;lt;= Node.val &amp;lt;= 100 l1 和 l2 均按 非递减顺序 排列 code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  /** * Definition for singly-linked list. * function ListNode(val, next) { * this.val = (val===undefined ?</description>
    </item>
    
    <item>
      <title>二进制求和</title>
      <link>https://zinkwu.blog/articles/add-binary/</link>
      <pubDate>Thu, 23 Jul 2020 10:09:44 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/add-binary/</guid>
      <description>给你两个二进制字符串，返回它们的和（用二进制表示）。
输入为 非空 字符串且只包含数字 1 和 0。
示例1：
 输入: a = &amp;ldquo;11&amp;rdquo;, b = &amp;ldquo;1&amp;rdquo; 输出: &amp;ldquo;100&amp;rdquo;
 示例2：
 输入: a = &amp;ldquo;1010&amp;rdquo;, b = &amp;ldquo;1011&amp;rdquo; 输出: &amp;ldquo;10101&amp;rdquo;
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  //满二进一 var addBinary = function(a, b) { let sum = 0	//保留上一次位数相加后是否进一  let result = &amp;#34;&amp;#34; for(let i = a.length -1, j = b.</description>
    </item>
    
    <item>
      <title>从尾到头打印链表</title>
      <link>https://zinkwu.blog/articles/print-linked-list/</link>
      <pubDate>Sun, 29 Mar 2020 10:09:29 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/print-linked-list/</guid>
      <description>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
示例：
输入：head = [1,3,2] 输出：[2,3,1] 限制：0 &amp;lt;= 链表长度 &amp;lt;= 10000
解：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  方法一：遍历链表，使用unshift将元素添加到数组头部 /** * Definition for singly-linked list.</description>
    </item>
    
    <item>
      <title>替换空格</title>
      <link>https://zinkwu.blog/articles/replace-spaces/</link>
      <pubDate>Sat, 28 Mar 2020 10:24:35 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/replace-spaces/</guid>
      <description>请实现一个函数，把字符串 s 中的每个空格替换成&amp;quot;%20&amp;quot;。
输入：s = &amp;quot;We are happy.&amp;quot; 输出：&amp;quot;We%20are%20happy.&amp;quot;
限制：0 &amp;lt;= s 的长度 &amp;lt;= 10000
解：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  // 方法一：正则 /** * @param {string} s * @return {string} */ var replaceSpace = function(s) { return s.replace(/ /g, &amp;#34;%20&amp;#34;) }; //方法二：遍历字符串 /** * @param {string} s * @return {string} */ var replaceSpace = function(s) { if (!</description>
    </item>
    
    <item>
      <title>二维数组中的查找</title>
      <link>https://zinkwu.blog/articles/locating-a-2d-matrix/</link>
      <pubDate>Thu, 26 Mar 2020 10:25:39 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/locating-a-2d-matrix/</guid>
      <description>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
示例： 现有矩阵 matrix 如下：
[ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] 给定 target = 5，返回 true。
给定 target = 20，返回 false。
限制：
0 &amp;lt;= n &amp;lt;= 1000
0 &amp;lt;= m &amp;lt;= 1000
 解： 由于每行每列的元素大小都是递增的，所以在遍历时可以判断当前元素是否大于 tatget，如果大于，则开始下一轮遍历。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  /** * @param {number[][]} matrix * @param {number} target * @return {boolean} */ var findNumberIn2DArray = function(matrix, target) { let result = false for(let i = 0; i &amp;lt; matrix.</description>
    </item>
    
    <item>
      <title>数组中重复的数字</title>
      <link>https://zinkwu.blog/articles/array-repetition-numbers/</link>
      <pubDate>Tue, 24 Mar 2020 10:26:48 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/array-repetition-numbers/</guid>
      <description>找出数组中重复的数字。
在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。
示例 1：
输入： [2, 3, 1, 0, 2, 5, 3] 输出：2 或 3 限制： 2 &amp;lt;= n &amp;lt;= 100000
解： 哈希，构造一个空对象，遍历数组，每次遍历数组时检查 hash 中是否包含有该元素
1 2 3 4 5 6 7 8  var findRepeatNumber = function(nums) { let hash = {} let result = [] for(let item of nums){ hash[item] ? result.push(item) : hash[item] = true } return result[0] };   </description>
    </item>
    
    <item>
      <title>两数之和</title>
      <link>https://zinkwu.blog/articles/two-sum/</link>
      <pubDate>Tue, 14 Jan 2020 10:28:07 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/two-sum/</guid>
      <description>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
示例:
给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]  解:
 方法1:  暴力法：检查当前元素之后是否有符合条件的元素，时间复杂度为O(n^2)，空间复杂度O(1)    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  /** * @param {number[]} nums * @param {number} target * @return {number[]} */ var twoSum = function(nums, target) { for(let i = 0; i &amp;lt; nums.</description>
    </item>
    
  </channel>
</rss>
