<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Zink&#39;s Blog</title>
    <link>https://zinkwu.blog/articles/</link>
    <description>Recent content in Articles on Zink&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Wed, 23 Feb 2022 18:08:16 +0000</lastBuildDate><atom:link href="https://zinkwu.blog/articles/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2022 CheckList</title>
      <link>https://zinkwu.blog/articles/2022-checklist/</link>
      <pubDate>Wed, 23 Feb 2022 18:08:16 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/2022-checklist/</guid>
      <description> 回去上班 读完 Vue2 &amp;amp; Vue3 的两本基于源码的书 读完《数据结构与算法图解》并实践 反复阅读《CSS 世界》 学习 TS &amp;amp; React 并实践 阅读《HTTP 权威指南》前四章 学习写 Rust 多写记录反思 如果有可能的话，继续打鼓吧  最重要的：
 英语报班 将英语用于日常生活 尽量在互联网上脱离简中环境 褪去那些华而不实的东西  </description>
    </item>
    
    <item>
      <title>Event Loop Promise async/await 总结</title>
      <link>https://zinkwu.blog/articles/event-loop-promise-async-await/</link>
      <pubDate>Fri, 11 Feb 2022 19:36:53 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/event-loop-promise-async-await/</guid>
      <description>同步任务  因为 JavaScript 是单线程的，所以同步任务只能在主线程上排队执行，并且只有当前一个任务完成才能执行下一个任务
当 JavaScript 运行时，每个函数的执行都会进入调用栈（Call Stack）中，当前函数执行完毕后将其移出栈，然后执行下一个函数，如果其中有非常耗时的函数执行，那么调用栈就阻塞了，后面的任务只能一直处于等待状态无法执行，且此时 UI 对面任何用户操作都不会响应，看起来就像程序崩溃了一样。
为什么解决这个问题，我们有了异步任务
   异步任务  常见的异步：
 setTimeout() setInterval() Promise.resolve().then() fetch.then()  异步任务在执行之前不会进入调用栈，它进入事件循环队列（Event Loop Queue），当主线程执行完毕后，且异步时机到了，就会将事件循环队列中的任务推入调用栈中执行。
   Event Loop  Event Loop 的工作非常简单，它只是监控调用栈和回调队列（包含每个事件对应的回调函数，比如 click 的回调函数）。如果调用栈为空，Event Loop 将队列中的第一个任务移除并推送到调用栈。
从 ES6 开始，Event Loop 处理异步也分两种，在Macrotask中处理setTimeout这类的，在Microtask中处理Promise这类的。它会优先处理Microtask中的任务
   Node.js 中的 Event Loop  Node.js 中的 Event Loop 分为 6 个阶段，依次是：
 timers 定时器  这个阶段执行已被setTimeout()和setInterval()调度的回调函数   pending callbacks 待定回调  执行延迟到下一个循环迭代的I/O回调   idle, prepare  Node.</description>
    </item>
    
    <item>
      <title>什么是继承？</title>
      <link>https://zinkwu.blog/articles/whats-inheritance/</link>
      <pubDate>Thu, 10 Feb 2022 18:19:40 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/whats-inheritance/</guid>
      <description>要理解继承，首先需要理解原型链
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  function Person(name, age, gender){ this.name = name this.age = age this.gender = gender } Person.prototype.hi = function (){ console.log(`Hi, I&amp;#39;m ${this.name}`) } let f = new Person(&amp;#39;zoe&amp;#39;, 18, &amp;#39;female&amp;#39;) f.__proto__ === Person.prototype // true，ES5写法 Object.getPrototypeOf(f) === Person.prototype // true，ES6写法, __proto__ 是浏览器厂商私建 Person.prototype.__proto__ === Object.prototype // true   首先定义几个基本名词：
 实例对象：通过new xxx出来的对象叫做实例对象 构造函数：如上方代码中的Person，一般以大写字母开头命名 - __proto__：ES6 之前，没有明确访问原型的方法，只能通过__proto__来访问，它的作用就是找到实例对象的原型 prototype：原型，是构造函数的一个属性 constructor：构造函数，写过 Java 这类 oop 的同学应该不陌生，这个在 ES5 中不经常接触到，ES6 中的 Class 经常用到，  然后通过上面的代码，我们可以得到这样的公式：</description>
    </item>
    
    <item>
      <title>谈论宏大叙事的人们</title>
      <link>https://zinkwu.blog/articles/people-talking-about-grand-narratives/</link>
      <pubDate>Tue, 25 Jan 2022 05:06:20 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/people-talking-about-grand-narratives/</guid>
      <description>曾经遇到过很多喜欢谈论宏大叙事的人，总是把政策、国情之类话题挂在嘴边但又并不是相关学术研究者的人，而谈论这些的目的，是在寻找何处有利可图，何处可以投机。
但在我看来，如今任何一个国家都无法构成单一的经济体，现在我们面临的是一个更为复杂、多元、全球性的经济体，换而言之，影响个人命运的变量越来越多，无法由自己掌握的东西太多，在过去的中国，社会情绪是只要努力就能成功，996 之类的东西无所谓，因为这个承诺最后大概率是能兑现的，而今天的社会情绪变为了内卷和躺平，反对 996 的社会情绪让更多人意识到：不管你如何努力工作，最后这所谓成功的承诺大概率是实现不了的。随着媒体的不断炒作，这种无力感、失控感越来越强。而谈论、研究政策之类的东西，会让人产生一种虚幻的权力感，让人觉得自己的思想凌驾于他人之上，并非凡人，他们需要在自己的圈子里重复此类话题的谈论，不断强化这虚幻的权力感，借此摆脱那种无力感。</description>
    </item>
    
    <item>
      <title>Vue3 文档笔记-基础篇</title>
      <link>https://zinkwu.blog/articles/vue3-docs-basic-notes/</link>
      <pubDate>Tue, 18 Jan 2022 05:29:32 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/vue3-docs-basic-notes/</guid>
      <description>好记性不如烂笔头
   Basic     通过 createApp 创建应用实例  在 vue2.x 中，使用的是new Vue()，返回的是根组件实例，而createApp返回的是应用实例，想要得到根组件实例，还需要使用mount方法，个人认为这个改动是在语法层面上区分创建组件和创建应用
   ES6 Proxy  vue2.x 使用 Object.defineProperty来实现数据相应，vue3 中使用 new Proxy()为数据架设一层代理，来实现数据响应
   计算属性 computed   计算属性会缓存结果，只要依赖值不变，多次访问该计算属性也不会执行代码，而是直接返回缓存结果，减小性能开销 计算属性拥有getter、setter     侦听器 watch   watch 与 computed 几乎相同，唯一不同的是，watch 允许在其中执行异步操作     class 与 style 的绑定     class    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  &amp;lt;div :class=&amp;#34;{active: isActive}&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div :class=&amp;#34;classes&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; data(){ return { classes: { avtive: true, container: true } } } &amp;lt;div :class=&amp;#34;[activeClass, containerClass]&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; data(){ return { activeClass: &amp;#39;active&amp;#39;, containerClass: &amp;#39;container&amp;#39; } }     也可以直接在v-bind:class中使用三运运算符来切换 class</description>
    </item>
    
    <item>
      <title>康复训练之 Vue2 UI 库开发总结</title>
      <link>https://zinkwu.blog/articles/publish-yourself-npm-package/</link>
      <pubDate>Thu, 13 Jan 2022 19:54:52 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/publish-yourself-npm-package/</guid>
      <description>之前康复训练，写了一个组件库，涵盖了：
 单元测试 自动化集成 上传至npm 书写文档  接下来总结下每一步
   单元测试  单元测试使用了Chai、Karma、Mocha、Siono
 Chai.js 是一个断言库 Karma 是一个测试运行容器，可以呼起浏览器运行测试代码 Mocha 是一个测试框架，参考了阮一峰的文章 Siono 作为 mock 工具提供间谍函数等，可以让我们在测试中测试组件的事件支持  其中难点在于如何将这个几个工具搭配起来构成一套完整的测试环境，除了google就是看文档&amp;hellip;
   自动化集成  当然，我也不想每次写完代码都自己手动跑一遍测试代码，所以我选择了GitHub Actions，在每次push代码时自动测试，失败了会有邮件通知
   上传至NPM  写了库，总是想 share 出去的
1 2 3 4 5 6  # 登录 npm adduser # 根据提示填写 # 发布 npm publish      书写文档  文档方面，选择了 VuePress，就图个文档易读</description>
    </item>
    
    <item>
      <title>wsl2 oh-my-zsh 配置</title>
      <link>https://zinkwu.blog/articles/wsl2-install-and-oh-my-zsh-config/</link>
      <pubDate>Wed, 29 Dec 2021 19:09:54 +0000</pubDate>
      
      <guid>https://zinkwu.blog/articles/wsl2-install-and-oh-my-zsh-config/</guid>
      <description>install wsl2  参照官方文档
   install oh-my-zsh  先安装 zsh
1 2 3 4 5 6 7 8  sudo apt install zsh zsh --version which zsh # $ZSH_PATH 是 which zsh 的值 chsh -s $ZSH_PATH   安装 oh-my-zsh
1 2 3 4 5  sh -c &amp;#34;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; # or sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34;   此时你的根目录下应该有一个 .oh-my-zsh 目录 plugins 目录是存放插件的地方，themes 是存放主题的地方</description>
    </item>
    
    <item>
      <title>Vue源码阅读记-Second Commit</title>
      <link>https://zinkwu.blog/articles/vue-source-read-second-commit/</link>
      <pubDate>Thu, 23 Dec 2021 06:55:09 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/vue-source-read-second-commit/</guid>
      <description>为什么要从 Second Commit 开始阅读呢？
 答案来自我看过我的一篇博客，但是关于 First Commit，基本是关于 Grunt 的配置，现代前端开发中，多以使用 Webpack 为主，所以粗略看了一下之后并无记录的打算。  不罗嗦，直接看代码
在这段代码我们已经触及了 Vue 的核心：data bind，实际上也跟我们现在写的 Vue 差不多（当然，这里不是指 SFC ）
首先在 HTML 部分，我们看到了文档中的“Mustache”语法，接下来我们看看最初的 data bind 是如何实现的。
在第 23 行，var content = el.innerHTML.replace(/\{\{(.*)\}\}/g, markToken)，用正则表达式匹配{{...}}，
关于 String.prototype.replace()
 你可以指定一个函数作为第二个参数。在这种情况下，当匹配执行后，该函数就会执行。 函数的返回值作为替换字符串。 (注意：上面提到的特殊替换参数在这里不能被使用。) 另外要注意的是，如果第一个参数是正则表达式，并且其为全局匹配模式，那么这个方法将被多次调用，每次匹配都会被调用。
 当第二个参数是一个函数时，函数接收多个参数，第一个参数match，表示匹配的子串，比如：{{msg}}、{{what}}等，第二个参数用于匹配正则表达式中括号匹配到的字符串，就是匹配正则表达式的这一部分：(.*)，并且这里可以接收多个参数：p1,p2,p3...，他们分别是括号对应的索引，具体参见 MDN。
ok，我们继续回到 23 行，每次匹配执行后都会执行这个函数，这个函数首先会往bindings内填充key:value，key 是{{}}内的值，value 则是一个空对象，然后 return 一个字符串 return &#39;&amp;lt;span &#39; + bindingMark + &#39;=&amp;quot;&#39; + variable +&#39;&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&#39;
接着遍历 bindings 执行 bind 方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  function bind (variable) { bindings[variable].</description>
    </item>
    
    <item>
      <title>Win11 PowerShell 配置</title>
      <link>https://zinkwu.blog/articles/windows-terminal-build/</link>
      <pubDate>Thu, 23 Dec 2021 01:47:35 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/windows-terminal-build/</guid>
      <description>首先请确保已安装 Git
   下载字体  下载并安装字体，为了修复乱码
地址: https://github.com/ryanoasis/nerd-fonts/releases 我使用的是 Hack。
   Install PowerShell  安装方式很多，自行搜索，我是直接从 Microsoft store 安装
   Terminal 的基本设置  修改字体为你下载的字体 开启亚克力效果 设置默认终端    安装 Scoop  1  iwr -useb get.scoop.sh | iex      安装 Neovim  1 2  scoop install neovim gcc nvim --version      PowerShell 配置  1 2  # 确认处于 user\xxx 目录下 nvim .</description>
    </item>
    
    <item>
      <title>Grid Layout</title>
      <link>https://zinkwu.blog/articles/grid-layout/</link>
      <pubDate>Mon, 13 Dec 2021 09:02:20 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/grid-layout/</guid>
      <description>什么是 Grid   Grid 是一种 CSS 布局方案 将浏览器划分为一个个网格并可以任意组合 Flex 和 Grid 看似相似，但内在相差很大  Flex 是轴线布局，只能指定 Item 处于轴线某个位置 Grid 是网格布局，将容器划分为行和列，产生单元格，并指定 Item 处于某个单元格中       基本概念   row 行 column 列 grid line 网格线 cell 单元格 将容器设置为display: grid后，容器内子元素的float、diaplay: inline-block、display: table-cell、vertical-align和column-*等设置都会失效  这个游戏能帮你更好的学习 grid
   容器属性     grid-template-columns 和 grid-template-rows  1 2 3 4 5 6 7 8 9 10 11  &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div&amp;gt;1&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;2&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;3&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;4&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;5&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;6&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;7&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;8&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;9&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;   1 2 3 4 5 6 7 8 9 10 11 12 13  .</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04.3 LTS 配置</title>
      <link>https://zinkwu.blog/articles/ubuntu-config/</link>
      <pubDate>Wed, 24 Nov 2021 09:08:12 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/ubuntu-config/</guid>
      <description>修改软件源为 aliyun
  更新系统
  1 2 3 4 5  # 更新本地包数据库 sudo apt update # 更新所有已安装的包 sudo apt upgrade       安装 git
  1  apt install git       安装 Terminnator
  1 2 3  sudo add-apt-repository ppa:gnome-terminator sudo apt update sudo apt install terminator       安装 zsh</description>
    </item>
    
    <item>
      <title>合并两个有序链表</title>
      <link>https://zinkwu.blog/articles/metge-two-sorted-linked-list/</link>
      <pubDate>Sat, 17 Jul 2021 10:09:51 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/metge-two-sorted-linked-list/</guid>
      <description>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
ex1:
输入：l1 = [1,2,4], l2 = [1,3,4] 输出：[1,1,2,3,4,4] tip:
两个链表的节点数目范围是 [0, 50] -100 &amp;lt;= Node.val &amp;lt;= 100 l1 和 l2 均按 非递减顺序 排列 code:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  /** * Definition for singly-linked list. * function ListNode(val, next) { * this.val = (val===undefined ?</description>
    </item>
    
    <item>
      <title>位运算</title>
      <link>https://zinkwu.blog/articles/bit-operation/</link>
      <pubDate>Wed, 07 Oct 2020 10:09:46 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/bit-operation/</guid>
      <description>否运算 not    ~
  按位取反
  0000 0011 ---[3] 1111 1100 1111 1101 ---[-3]    按位与 and    &amp;amp;
  两个位都是1时，结果才为1，否则为0
  5 &amp;amp; 3 0101 0011 ---- 0001 ---[1]    按位或 or    |
  两个位都是0时，结果才为0，否则都为1
  5 | 3 0101 0011 ---- 0111 ---[7]    异或（不带进位的加法）xor    ^</description>
    </item>
    
    <item>
      <title>二进制求和</title>
      <link>https://zinkwu.blog/articles/add-binary/</link>
      <pubDate>Thu, 23 Jul 2020 10:09:44 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/add-binary/</guid>
      <description>给你两个二进制字符串，返回它们的和（用二进制表示）。
输入为 非空 字符串且只包含数字 1 和 0。
示例1：
 输入: a = &amp;ldquo;11&amp;rdquo;, b = &amp;ldquo;1&amp;rdquo; 输出: &amp;ldquo;100&amp;rdquo;
 示例2：
 输入: a = &amp;ldquo;1010&amp;rdquo;, b = &amp;ldquo;1011&amp;rdquo; 输出: &amp;ldquo;10101&amp;rdquo;
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  //满二进一 var addBinary = function(a, b) { let sum = 0	//保留上一次位数相加后是否进一  let result = &amp;#34;&amp;#34; for(let i = a.length -1, j = b.</description>
    </item>
    
    <item>
      <title>二叉树基础</title>
      <link>https://zinkwu.blog/articles/binary-tree/</link>
      <pubDate>Fri, 24 Apr 2020 10:09:33 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/binary-tree/</guid>
      <description>树
 树是一种常用的数据结构，用来模拟具有树状结构性质的数据集合 树的每一个节点有一个根植和一个包含所有子节点的列表。    二叉树
 二叉树是一种更为典型的树状结构。二叉树每个节点最多具有两个子树，通常子树称为“左子树”和“右子树”    二叉树前序遍历
 前序遍历首先访问根节点，然后遍历左子树，最后遍历右子树（根节点 -&amp;gt; 左子树 -&amp;gt; 右子树） 算法：    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  /** * Definition for a binary tree node. * function TreeNode(val) { * this.val = val; * this.left = this.</description>
    </item>
    
    <item>
      <title>从尾到头打印链表</title>
      <link>https://zinkwu.blog/articles/print-linked-list/</link>
      <pubDate>Sun, 29 Mar 2020 10:09:29 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/print-linked-list/</guid>
      <description>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。
示例：
输入：head = [1,3,2] 输出：[2,3,1] 限制：0 &amp;lt;= 链表长度 &amp;lt;= 10000
解：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  方法一：遍历链表，使用unshift将元素添加到数组头部 /** * Definition for singly-linked list.</description>
    </item>
    
    <item>
      <title>替换空格</title>
      <link>https://zinkwu.blog/articles/replace-spaces/</link>
      <pubDate>Sat, 28 Mar 2020 10:24:35 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/replace-spaces/</guid>
      <description>请实现一个函数，把字符串 s 中的每个空格替换成&amp;quot;%20&amp;quot;。
输入：s = &amp;quot;We are happy.&amp;quot; 输出：&amp;quot;We%20are%20happy.&amp;quot;
限制：0 &amp;lt;= s 的长度 &amp;lt;= 10000
解：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  // 方法一：正则 /** * @param {string} s * @return {string} */ var replaceSpace = function(s) { return s.replace(/ /g, &amp;#34;%20&amp;#34;) }; //方法二：遍历字符串 /** * @param {string} s * @return {string} */ var replaceSpace = function(s) { if (!</description>
    </item>
    
    <item>
      <title>二维数组中的查找</title>
      <link>https://zinkwu.blog/articles/locating-a-2d-matrix/</link>
      <pubDate>Thu, 26 Mar 2020 10:25:39 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/locating-a-2d-matrix/</guid>
      <description>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
示例： 现有矩阵 matrix 如下：
[ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] 给定 target = 5，返回 true。
给定 target = 20，返回 false。
限制：
0 &amp;lt;= n &amp;lt;= 1000
0 &amp;lt;= m &amp;lt;= 1000
 解： 由于每行每列的元素大小都是递增的，所以在遍历时可以判断当前元素是否大于 tatget，如果大于，则开始下一轮遍历。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  /** * @param {number[][]} matrix * @param {number} target * @return {boolean} */ var findNumberIn2DArray = function(matrix, target) { let result = false for(let i = 0; i &amp;lt; matrix.</description>
    </item>
    
    <item>
      <title>数组中重复的数字</title>
      <link>https://zinkwu.blog/articles/array-repetition-numbers/</link>
      <pubDate>Tue, 24 Mar 2020 10:26:48 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/array-repetition-numbers/</guid>
      <description>找出数组中重复的数字。
在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。
示例 1：
输入： [2, 3, 1, 0, 2, 5, 3] 输出：2 或 3 限制： 2 &amp;lt;= n &amp;lt;= 100000
解： 哈希，构造一个空对象，遍历数组，每次遍历数组时检查 hash 中是否包含有该元素
1 2 3 4 5 6 7 8  var findRepeatNumber = function(nums) { let hash = {} let result = [] for(let item of nums){ hash[item] ? result.push(item) : hash[item] = true } return result[0] };   </description>
    </item>
    
    <item>
      <title>两数之和</title>
      <link>https://zinkwu.blog/articles/two-sum/</link>
      <pubDate>Tue, 14 Jan 2020 10:28:07 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/two-sum/</guid>
      <description>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。
你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。
示例:
给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]  解:
 方法1:  暴力法：检查当前元素之后是否有符合条件的元素，时间复杂度为O(n^2)，空间复杂度O(1)    1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  /** * @param {number[]} nums * @param {number} target * @return {number[]} */ var twoSum = function(nums, target) { for(let i = 0; i &amp;lt; nums.</description>
    </item>
    
    <item>
      <title>链表</title>
      <link>https://zinkwu.blog/articles/linked-list/</link>
      <pubDate>Mon, 06 Jan 2020 10:28:59 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/linked-list/</guid>
      <description>链表的区别  链表也分为单链表和双链表。
 单链表：每个节点包含 value 和 next，next 指向下一个节点 双链表：每个节点包含 prev、value 和 next，prev 指向前一个节点，next 指向下一个节点     单链表的实现  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98  class Node{ constructor(value){ this.</description>
    </item>
    
    <item>
      <title>栈、队列</title>
      <link>https://zinkwu.blog/articles/stack-queue/</link>
      <pubDate>Wed, 18 Dec 2019 10:29:50 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/stack-queue/</guid>
      <description>栈  栈是一种线性数据结构，其修改顺序是后进先出(last in first out)，因此也被成为 LIFO表。 在现实生活中可以映射到我们堆叠在桌子上的书、餐具柜中队列的餐盘之类。
我们可以用数组模拟栈：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  class Static{ constructor(){ this.items = [] } // 检查栈是否为空  get isEmpty(){ return !this.items.length } // 获取栈的长度  get size(){ return this.items.length } // 查看栈顶  get top(){ return this.</description>
    </item>
    
    <item>
      <title>浏览器地址栏输入URL敲回车之后发生了哪些事</title>
      <link>https://zinkwu.blog/articles/what-happens-when-you-type-an-url-in-the-browser-and-press-ente/</link>
      <pubDate>Mon, 18 Nov 2019 10:30:51 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/what-happens-when-you-type-an-url-in-the-browser-and-press-ente/</guid>
      <description>判断输入的是 URL 还是搜索的关键字
  转换非 ASCII 的 Unicode 字符
 比如：中文、空格    检查HSTS 列表
 浏览器检查自带的“预加载 HSTS（HTTP严格传输安全）”列表，这个列表里包含了那些请求浏览器只使用HTTPS进行连接的 URL，如果这个 URL在列表里，则默认使用 HTTPS 协议而不是 HTTP 协议    查找域名的 IP 地址
 查找浏览器的 DNS 缓存，没找到则执行下一步 查找操作系统中的 DNS 缓存，没找到则执行下一步 查找 OS 中的 hosts 文件，没找到则执行下一步 在 OS 的 LDNS 中查找域名对应的 IP（这一步可能会遇到 DNS 污染，解决方案为：1. 切换 DNS 服务器；2. 清空 DNS 缓存；3. 修改系统 hosts 文件，将域名与对应的 IP 地址绑定写死），没找到则发起一个迭代 DNS 解析请求  LDNS 向 根域名服务器 发起请求，RDNS 返回 一级域名 对应的 IP 地址 LDNS 向 一级域名服务器 发起请求，得到 二级域名 对应的 IP 地址 LDNS 向 二级域名服务器 发起请求，得到 三级域名 对应的 IP 地址   LDNS 将得到的 IP 地址返回给 OS，并且将这个 IP 地址缓存起来 OS 将 IP 地址返回给浏览器，并且将这个 IP 地址缓存起来 浏览器得到域名对应的 IP 地址，并且将这个 IP 地址缓存起来    建立 TCP 连接</description>
    </item>
    
    <item>
      <title>Call &amp; Apply &amp; Bind实现</title>
      <link>https://zinkwu.blog/articles/call-apply-bind-implement/</link>
      <pubDate>Tue, 24 Sep 2019 10:33:29 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/call-apply-bind-implement/</guid>
      <description>&amp;lt;code&amp;gt;call&amp;lt;/code&amp;gt; &amp;amp;amp;&amp;amp;amp; &amp;lt;code&amp;gt;apply&amp;lt;/code&amp;gt; &amp;amp;amp;&amp;amp;amp; &amp;lt;code&amp;gt;bind&amp;lt;/code&amp;gt; 的作用  call、apply、bind的作用都是改变函数的 this 指向
 call：call 的第一个参数就是对函数绑定的 this，为一个对象，后面的参数是函数调用时所需要的参数 apply：apply 只接受两个参数，第一个与 call 相同，第二个参数是为数组，内容是函数调用所需要的参数 bind：bind 与 call作用相同，不过 bind 会返回一个新的函数，第一个参数之后的参数将绑定原函数的参数。     实现 &amp;lt;code&amp;gt;call&amp;lt;/code&amp;gt;  先来看看原生call的使用方法
1 2 3 4 5 6 7 8 9 10 11  let obj = { a: 1 } function fn(){ console.log(this.a) } fn() // undefined  fn.call(obj) // 1   call 是如何将 this 绑定到 obj 上的呢？ 我们换一种思路，先看下面的代码</description>
    </item>
    
    <item>
      <title>Input中如何处理中文输入防抖</title>
      <link>https://zinkwu.blog/articles/chinese-input-debounce/</link>
      <pubDate>Mon, 23 Sep 2019 10:35:18 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/chinese-input-debounce/</guid>
      <description>防抖  函数防抖和节流，都是控制事件触发频率的方法。具体实现可以看我的这篇文章
   input 如何处理中文输入  如果只是单纯的使用 input 事件来监听 input 值的改变，那么每次敲击键盘，输入一个字母都会触发 input 事件，其实我们想要的是获取用户输入的中文再进行后续操作。
我们可以假象一下，输入中文时的字母都是预输入，只有当选择候选词之后，input得到的值才是我们想要的。
现在，向大家介绍两个新的 DOM 事件：compositionstart、compositionend
 compositionstart：compositionstart 事件触发于一段文字的输入之前 compositionend：当文本段落的组成完成或取消时, compositionend 事件将被触发  1  &amp;lt;input type=&amp;#34;text&amp;#34;&amp;gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  let inputElement = document.</description>
    </item>
    
    <item>
      <title>这一次，我一定会搞定 This ！</title>
      <link>https://zinkwu.blog/articles/about-this/</link>
      <pubDate>Mon, 16 Sep 2019 10:36:19 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/about-this/</guid>
      <description>迫于  迫于在写 React 事件处理中的 this 时，写到 this 突然卡壳了，一顿冷静分析之后发现自己对于 this 的理解又忘了一些，于是痛定思痛，重新读了 《You-Dont-Know-JS》中关于 this 的文章。
    函数的执行环境  首先上一段代码
1 2 3 4 5 6 7 8 9 10 11 12  function fn(){ console.log(this.a) } let obj = { a: 1, fn: fn } var a = &amp;#39;window&amp;#39; fn() //window obj.fn() //1   首先我们要明确一点 ，this 不是编写代码时就绑定的，而是运行时绑定的。 比如 fn() 在调用时，所处的环境是 global，所以他的 this 就是 window 而 obj.</description>
    </item>
    
    <item>
      <title>防抖和节流</title>
      <link>https://zinkwu.blog/articles/debounce-throttle/</link>
      <pubDate>Tue, 06 Aug 2019 10:37:38 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/debounce-throttle/</guid>
      <description>什么是防抖？如何实现？  动作绑定事件，动作发生后一定时间后触发事件，在这段时间内，如果该动作又发生，则重新等待一定时间再触发事件。
实现：每次触发事件时都取消之前的延时调用方法。
1 2 3 4 5 6 7 8 9  function debounce(fn) { let timer = null; return function() { clearTimeout(timer); timer = setTimeout(() =&amp;gt; { fn.apply(this, arguments) }, 500) }; }       什么是节流？如何实现？  动作发生后一段时间后触发事件，在这段时间内，如果动作又发生，则无视该动作，直到事件执行完后，才能重新触发。
实现：每次触发事件时都判断当前是否有等待执行的延时函数，如果有，则无视该次动作。
1 2 3 4 5 6 7 8 9 10 11  function throttle(fn) { let canRun = true; return function() { if (!</description>
    </item>
    
    <item>
      <title>JavaScript的深浅拷贝</title>
      <link>https://zinkwu.blog/articles/js-deep-and-shallow-clone/</link>
      <pubDate>Wed, 24 Jul 2019 10:38:27 +0800</pubDate>
      
      <guid>https://zinkwu.blog/articles/js-deep-and-shallow-clone/</guid>
      <description>JavaScript的数据类型  JS中有7种数据类型：String、Number、Boolean、Null、Undefined、对象以及ES6新增的Symbol。 由于目前还未深入了解过Symbol，所以此次不讨论Symbol。 其中6种为基本类型（或叫做简单数据类型）和1种引用类型（复杂数据类型）。
 基本类型  String Number Boolean Null Undefined   引用类型  对象       不同数据类型在内存中如何存储？  我们将内存分为栈（Stack）内存和堆（Heap）内存 基本类型以固定大小的空间存在与栈内存中，当基本类型发生值的拷贝时，目标变量会得到原始变量的值的副本。
1 2  let a = 1 let b = a //1   引用类型的值是对象，保存在堆内存中，引用类型的变量的值并不是值的本身，而是这个值在堆内存中的地址（也有说法为指针，不过我个人觉得地址容易理解）。当引用类型发生值的拷贝的时候，实际上目标变量得到的是原始变量的值的地址。
1 2 3 4 5 6 7  let obj1 = { name: &amp;#34;jack&amp;#34; } /* 此时{name: &amp;#34;jack&amp;#34;}这个对象存在于堆内存中，我们假设他的地址是218 */ let obj2 = obj1 //在这个赋值操作中，传递的其实是对象在内存中的地址      浅拷贝  1 2 3 4 5 6 7 8 9 10  let data = { name: &amp;#34;jack&amp;#34;, age: 18, gender: &amp;#34;male&amp;#34; } let copyDate = data copyDate === data //true copyDate.</description>
    </item>
    
  </channel>
</rss>
