<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rush</title>
    <link>https://zinkwu.me/</link>
    <description>Recent content on Rush</description>
    <generator>Hugo -- 0.139.3</generator>
    <language>zh-Hans</language>
    <copyright>2024 by Rush</copyright>
    <lastBuildDate>Mon, 02 Dec 2024 14:08:30 +0800</lastBuildDate>
    <atom:link href="https://zinkwu.me/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记录 node/package manager 的一些细碎</title>
      <link>https://zinkwu.me/posts/volta/</link>
      <pubDate>Mon, 02 Dec 2024 14:08:30 +0800</pubDate>
      <guid>https://zinkwu.me/posts/volta/</guid>
      <description>&lt;h2 id=&#34;yarn2&#34;&gt;yarn2&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;yarn2&lt;/code&gt;不再支持&lt;code&gt;yarn global add&lt;/code&gt;，参考 &lt;a href=&#34;https://github.com/yarnpkg/berry/issues/4570#issuecomment-1164084755&#34;&gt;issue&lt;/a&gt;。
顺便一说发现好多人还在用&lt;code&gt;yarn1&lt;/code&gt;&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;volta&#34;&gt;volta&lt;/h2&gt;
&lt;p&gt;使用&lt;code&gt;volta&lt;/code&gt;作为&lt;code&gt;node manamger&lt;/code&gt;，目前存在无法使用&lt;code&gt;pnpm&lt;/code&gt;全局安装的问题，同样可采用&lt;code&gt;pnpm dlx ...&lt;/code&gt;的方式来解决&lt;/p&gt;
&lt;p&gt;&lt;code&gt;volta uninstall yarn&lt;/code&gt;失败，参考 &lt;a href=&#34;https://github.com/volta-cli/volta/issues/327&#34;&gt;issue1&lt;/a&gt;、&lt;a href=&#34;https://github.com/volta-cli/volta/issues/1431#issuecomment-1443984008&#34;&gt;issue2&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;fnm&#34;&gt;fnm&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fnm&lt;/code&gt;和&lt;code&gt;volta&lt;/code&gt; 用下来，个人还是感觉&lt;code&gt;volta&lt;/code&gt;更舒适，主要还是在于&lt;code&gt;volta&lt;/code&gt;对于&lt;code&gt;node&lt;/code&gt;版本的切换无感知，而&lt;code&gt;fnm&lt;/code&gt;需要手动切换版本。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;volta&lt;/code&gt;只需要在项目中&lt;code&gt;volta pin node@x.x.x&lt;/code&gt;就可以将版本写入&lt;code&gt;package.json&lt;/code&gt;中，随后每次进入不同的目录都会自动切换到对应的&lt;code&gt;node&lt;/code&gt;版本。&lt;/p&gt;
&lt;h2 id=&#34;corepack&#34;&gt;corepack&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;corepack&lt;/code&gt;不能与&lt;code&gt;volta&lt;/code&gt;使用，当你使用&lt;code&gt;volta install node&lt;/code&gt;后，你的&lt;code&gt;node&lt;/code&gt;中并没有 &lt;code&gt;corepack&lt;/code&gt;，参考 &lt;a href=&#34;https://github.com/volta-cli/volta/issues/987&#34;&gt;issue1&lt;/a&gt;、&lt;a href=&#34;https://github.com/volta-cli/volta/issues/1200&#34;&gt;issue2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然说&lt;code&gt;corepack&lt;/code&gt;已经被视为规范，但它处于试验阶段好几年了，且&lt;code&gt;node&lt;/code&gt;官方常年不作为&amp;hellip;所以我还是选择先相信&lt;code&gt;volta&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.29 思考</title>
      <link>https://zinkwu.me/posts/think-0629/</link>
      <pubDate>Wed, 29 Jun 2022 14:20:29 +0000</pubDate>
      <guid>https://zinkwu.me/posts/think-0629/</guid>
      <description>&lt;p&gt;入职快两个月了，这段时间基本是被工作推动生活，几乎忘了自己的目标，今天更新 checklist 的时候终于有机会回过头来看了。发现这样的状态还是蛮危险的，安逸于当下的生活，对未来失去了活力。&lt;/p&gt;
&lt;p&gt;最近又感到自己知识上的匮乏，twitter 最近的 timeline 发生了一些大事，我能感觉到这些事背后还有更深的冰山，但是我无法探究下去，甚至无法用语言对下面这座冰山进行一个粗略的描述。这使我焦虑，或许我应该调整一下生活模式：把学习新知识作为一个构建生活的方式，而不是用娱乐、工作、消遣来填满我的生活。&lt;/p&gt;
&lt;p&gt;人还是不能被普通人叙事打倒，一定得在某些方面追求卓越（不一定是社会面的判断标准），才能让自己感觉到活着。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Event Loop Promise async/await 总结</title>
      <link>https://zinkwu.me/posts/event-loop-promise-async-await/</link>
      <pubDate>Thu, 10 Mar 2022 11:09:39 +0000</pubDate>
      <guid>https://zinkwu.me/posts/event-loop-promise-async-await/</guid>
      <description>&lt;h2 id=&#34;同步任务&#34;&gt;同步任务&lt;/h2&gt;
&lt;p&gt;因为 JavaScript 是单线程的，所以同步任务只能在主线程上排队执行，并且只有当前一个任务完成才能执行下一个任务&lt;/p&gt;
&lt;p&gt;当 JavaScript 运行时，每个函数的执行都会进入调用栈（Call Stack）中，当前函数执行完毕后将其移出栈，然后执行下一个函数，如果其中有非常耗时的函数执行，那么调用栈就阻塞了，后面的任务只能一直处于等待状态无法执行，且此时 UI 对面任何用户操作都不会响应，看起来就像程序崩溃了一样。&lt;/p&gt;
&lt;p&gt;为了解决这个问题，我们有了异步任务。&lt;/p&gt;
&lt;h2 id=&#34;异步任务&#34;&gt;异步任务&lt;/h2&gt;
&lt;p&gt;常见的异步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise.resolve().then()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch.then()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;异步任务在执行之前不会进入调用栈，它进入事件循环队列（Event Loop Queue），当主线程执行完毕后，且异步时机到了，就会将事件循环队列中的任务推入调用栈中执行。&lt;/p&gt;
&lt;h2 id=&#34;event-loop&#34;&gt;Event Loop&lt;/h2&gt;
&lt;p&gt;Event Loop 的工作非常简单，它只是监控调用栈和回调队列（包含每个事件对应的回调函数，比如 click 的回调函数）。如果调用栈为空，Event Loop 将队列中的第一个任务&lt;strong&gt;移除并推送&lt;/strong&gt;到调用栈。&lt;/p&gt;
&lt;p&gt;从 ES6 开始，Event Loop 处理异步也分两种，在&lt;code&gt;Macrotask&lt;/code&gt;中处理&lt;code&gt;setTimeout&lt;/code&gt;这类的，在&lt;code&gt;Microtask&lt;/code&gt;中处理&lt;code&gt;Promise&lt;/code&gt;这类的。它会优先处理&lt;code&gt;Microtask&lt;/code&gt;中的任务&lt;/p&gt;
&lt;p&gt;browser event model
&lt;img loading=&#34;lazy&#34; src=&#34;promise/event-model.png&#34; alt=&#34;promise constructor&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;nodejs-中的-event-loop&#34;&gt;Node.js 中的 Event Loop&lt;/h2&gt;
&lt;p&gt;Node.js 中的 Event Loop 分为 6 个阶段，依次是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;timers 定时器
&lt;ul&gt;
&lt;li&gt;这个阶段执行已被&lt;code&gt;setTimeout()&lt;/code&gt;和&lt;code&gt;setInterval()&lt;/code&gt;调度的回调函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;pending callbacks 待定回调
&lt;ul&gt;
&lt;li&gt;执行延迟到下一个循环迭代的I/O回调&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;idle, prepare
&lt;ul&gt;
&lt;li&gt;Node.js 系统内部使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;poll 轮询
&lt;ul&gt;
&lt;li&gt;检索新的 I/O 事件；执行与 I/O 相关的回调（几乎所有情况下，除了关闭的回调函数，那些由计时器和 &lt;code&gt;setImmediate()&lt;/code&gt; 调度的之外），其余情况 node 将在适当的时候在此阻塞（等待）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;check 检测
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setImmediate()&lt;/code&gt;回调函数在这里执行&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;close callback 关闭的回调函数
&lt;ul&gt;
&lt;li&gt;一些关闭的回调函数，如：&lt;code&gt;sockt.on(&#39;close&#39;, ...)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;process.nextTick()&lt;/code&gt;的回调会在每个阶段结束之前调用。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>React 哲学</title>
      <link>https://zinkwu.me/posts/thinking-in-react/</link>
      <pubDate>Wed, 02 Mar 2022 11:12:40 +0000</pubDate>
      <guid>https://zinkwu.me/posts/thinking-in-react/</guid>
      <description>&lt;p&gt;最近在看 React 的文档，因为之前有使用 Vue 的经验，所以其中的概念理解起来倒是不算难，不过 React 的文档给我的感觉并不只是教我怎么写 React，怎么使用它的语法，它更多的是在教我如何从组件的角度出发，编写一个健壮的 web app。&lt;/p&gt;
&lt;p&gt;以前在写 Vue 组件的时候，通常是使用现有的基础组件库，然后拼装成一个 page component，所有数据都由 page component 管理，通过 props 将数据分发给子组件，但是以前并没有思考过为什么要这样做，只是因为大家都这样写代码，所以我也这样写代码。&lt;/p&gt;
&lt;p&gt;而 React 哲学告诉了我们，在面对一份新的设计稿时，应当如何从最基本的层面去思考如何构建这个页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：通过 UI 来划分组件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实在设计领域，也一直在推崇组件化，即设计师在设计 UI 时，也需要将每个功能点按组件划分，并不是一味地堆叠元素。&lt;/p&gt;
&lt;p&gt;通过&lt;strong&gt;单一功能原则&lt;/strong&gt;来判断组件的分为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：创建一个静态版本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步通俗来说应该就是切图了，通过 mock data 构建一个没有交互能力的静态版本&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三步：确定 UI state 的最小（且完整）表示&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;确定哪些数据是需要组件自身来更改。&lt;/p&gt;
&lt;p&gt;通过可以从以下三步判断：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该数据是否是由父组件通过 props 传递而来的？如果是，那它应该不是 state。&lt;/li&gt;
&lt;li&gt;该数据是否随时间的推移而保持不变？如果是，那它应该也不是 state。
&lt;ul&gt;
&lt;li&gt;这一步我的理解是，该数据是否可由组件自身的交互操作改变它&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;你能否根据其他 state 或 props 计算出该数据的值？如果是，那它也不是 state。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;第四步：确定 state 放置的位置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设现在拥有 parent compoent、child1 component 和 child2 component（后文简称 p、c1、c2），c2 中的数据由 p 通过 props 传递给它，c1 自身维护一份 state，但 c2 中的数据依赖 c1 的 state，那么此时应该将 c1 的 state 提升到 p 中，并通过 props 传递给 c1&lt;/p&gt;</description>
    </item>
    <item>
      <title>什么是继承？</title>
      <link>https://zinkwu.me/posts/whats-inheritance/</link>
      <pubDate>Thu, 10 Feb 2022 18:19:40 +0000</pubDate>
      <guid>https://zinkwu.me/posts/whats-inheritance/</guid>
      <description>强化关于继承的知识</description>
    </item>
    <item>
      <title>谈论宏大叙事的人们</title>
      <link>https://zinkwu.me/posts/people-talking-about-grand-narratives/</link>
      <pubDate>Tue, 25 Jan 2022 05:06:20 +0000</pubDate>
      <guid>https://zinkwu.me/posts/people-talking-about-grand-narratives/</guid>
      <description>&lt;p&gt;曾经遇到过很多喜欢谈论宏大叙事的人，总是把政策、国情之类话题挂在嘴边但又并不是相关学术研究者的人，而谈论这些的目的，是在寻找何处有利可图，何处可以投机。&lt;/p&gt;
&lt;p&gt;但在我看来，如今任何一个国家都无法构成单一的经济体，现在我们面临的是一个更为复杂、多元、全球性的经济体，换而言之，影响个人命运的变量越来越多，无法由自己掌握的东西太多，在过去的中国，社会情绪是只要努力就能成功，996 之类的东西无所谓，因为这个承诺最后大概率是能兑现的，而今天的社会情绪变为了内卷和躺平，反对 996 的社会情绪让更多人意识到：不管你如何努力工作，最后这所谓成功的承诺大概率是实现不了的。随着媒体的不断炒作，这种无力感、失控感越来越强。而谈论、研究政策之类的东西，会让人产生一种虚幻的权力感，让人觉得自己的思想凌驾于他人之上，并非凡人，他们需要在自己的圈子里重复此类话题的谈论，不断强化这虚幻的权力感，借此摆脱那种无力感。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vue3 文档笔记-基础篇</title>
      <link>https://zinkwu.me/posts/vue3-docs-basic-notes/</link>
      <pubDate>Tue, 18 Jan 2022 05:29:32 +0000</pubDate>
      <guid>https://zinkwu.me/posts/vue3-docs-basic-notes/</guid>
      <description>笔记</description>
    </item>
    <item>
      <title>康复训练之 Vue2 UI 库开发总结</title>
      <link>https://zinkwu.me/posts/publish-yourself-npm-package/</link>
      <pubDate>Thu, 13 Jan 2022 19:54:52 +0800</pubDate>
      <guid>https://zinkwu.me/posts/publish-yourself-npm-package/</guid>
      <description>总结记录</description>
    </item>
    <item>
      <title>wsl2 oh-my-zsh 配置</title>
      <link>https://zinkwu.me/posts/wsl2-install-and-oh-my-zsh-config/</link>
      <pubDate>Wed, 29 Dec 2021 19:09:54 +0000</pubDate>
      <guid>https://zinkwu.me/posts/wsl2-install-and-oh-my-zsh-config/</guid>
      <description>笔记</description>
    </item>
    <item>
      <title>Vue源码阅读记-Second Commit</title>
      <link>https://zinkwu.me/posts/vue-source-read-second-commit/</link>
      <pubDate>Thu, 23 Dec 2021 06:55:09 +0800</pubDate>
      <guid>https://zinkwu.me/posts/vue-source-read-second-commit/</guid>
      <description>vue源码阅读笔记</description>
    </item>
    <item>
      <title>Win11 PowerShell 配置</title>
      <link>https://zinkwu.me/posts/windows-terminal-build/</link>
      <pubDate>Thu, 23 Dec 2021 01:47:35 +0800</pubDate>
      <guid>https://zinkwu.me/posts/windows-terminal-build/</guid>
      <description>笔记</description>
    </item>
    <item>
      <title>Grid Layout</title>
      <link>https://zinkwu.me/posts/grid-layout/</link>
      <pubDate>Mon, 13 Dec 2021 09:02:20 +0800</pubDate>
      <guid>https://zinkwu.me/posts/grid-layout/</guid>
      <description>Grid Layout知识点笔记</description>
    </item>
    <item>
      <title>Ubuntu 20.04.3 LTS 配置</title>
      <link>https://zinkwu.me/posts/ubuntu-config/</link>
      <pubDate>Wed, 24 Nov 2021 09:08:12 +0800</pubDate>
      <guid>https://zinkwu.me/posts/ubuntu-config/</guid>
      <description>笔记</description>
    </item>
    <item>
      <title>合并两个有序链表</title>
      <link>https://zinkwu.me/posts/metge-two-sorted-linked-list/</link>
      <pubDate>Sat, 17 Jul 2021 10:09:51 +0800</pubDate>
      <guid>https://zinkwu.me/posts/metge-two-sorted-linked-list/</guid>
      <description>leetcode解题笔记</description>
    </item>
    <item>
      <title>位运算</title>
      <link>https://zinkwu.me/posts/bit-operation/</link>
      <pubDate>Wed, 07 Oct 2020 10:09:46 +0800</pubDate>
      <guid>https://zinkwu.me/posts/bit-operation/</guid>
      <description>位运算基础知识</description>
    </item>
    <item>
      <title>二进制求和</title>
      <link>https://zinkwu.me/posts/add-binary/</link>
      <pubDate>Thu, 23 Jul 2020 10:09:44 +0800</pubDate>
      <guid>https://zinkwu.me/posts/add-binary/</guid>
      <description>leetcode二进制求和js解题</description>
    </item>
    <item>
      <title>二叉树基础</title>
      <link>https://zinkwu.me/posts/binary-tree/</link>
      <pubDate>Fri, 24 Apr 2020 10:09:33 +0800</pubDate>
      <guid>https://zinkwu.me/posts/binary-tree/</guid>
      <description>二叉树基础知识</description>
    </item>
    <item>
      <title>从尾到头打印链表</title>
      <link>https://zinkwu.me/posts/print-linked-list/</link>
      <pubDate>Sun, 29 Mar 2020 10:09:29 +0800</pubDate>
      <guid>https://zinkwu.me/posts/print-linked-list/</guid>
      <description>防抖和节流的代码实现</description>
    </item>
    <item>
      <title>替换空格</title>
      <link>https://zinkwu.me/posts/replace-spaces/</link>
      <pubDate>Sat, 28 Mar 2020 10:24:35 +0800</pubDate>
      <guid>https://zinkwu.me/posts/replace-spaces/</guid>
      <description>leetcode解题笔记</description>
    </item>
    <item>
      <title>二维数组中的查找</title>
      <link>https://zinkwu.me/posts/locating-a-2d-matrix/</link>
      <pubDate>Thu, 26 Mar 2020 10:25:39 +0800</pubDate>
      <guid>https://zinkwu.me/posts/locating-a-2d-matrix/</guid>
      <description>leetcode解题笔记</description>
    </item>
    <item>
      <title>数组中重复的数字</title>
      <link>https://zinkwu.me/posts/array-repetition-numbers/</link>
      <pubDate>Tue, 24 Mar 2020 10:26:48 +0800</pubDate>
      <guid>https://zinkwu.me/posts/array-repetition-numbers/</guid>
      <description>leetcode数组中重复的数字js解题</description>
    </item>
    <item>
      <title>两数之和</title>
      <link>https://zinkwu.me/posts/two-sum/</link>
      <pubDate>Tue, 14 Jan 2020 10:28:07 +0800</pubDate>
      <guid>https://zinkwu.me/posts/two-sum/</guid>
      <description>leetcode解题笔记</description>
    </item>
    <item>
      <title>链表</title>
      <link>https://zinkwu.me/posts/linked-list/</link>
      <pubDate>Mon, 06 Jan 2020 10:28:59 +0800</pubDate>
      <guid>https://zinkwu.me/posts/linked-list/</guid>
      <description>链表基础知识笔记</description>
    </item>
    <item>
      <title>栈、队列</title>
      <link>https://zinkwu.me/posts/stack-queue/</link>
      <pubDate>Wed, 18 Dec 2019 10:29:50 +0800</pubDate>
      <guid>https://zinkwu.me/posts/stack-queue/</guid>
      <description>栈、队列基础知识笔记</description>
    </item>
    <item>
      <title>浏览器地址栏输入URL敲回车之后发生了哪些事</title>
      <link>https://zinkwu.me/posts/what-happens-when-you-type-an-url-in-the-browser-and-press-ente/</link>
      <pubDate>Mon, 18 Nov 2019 10:30:51 +0800</pubDate>
      <guid>https://zinkwu.me/posts/what-happens-when-you-type-an-url-in-the-browser-and-press-ente/</guid>
      <description>笔记</description>
    </item>
    <item>
      <title>Call &amp; Apply &amp; Bind实现</title>
      <link>https://zinkwu.me/posts/call-apply-bind-implement/</link>
      <pubDate>Tue, 24 Sep 2019 10:33:29 +0800</pubDate>
      <guid>https://zinkwu.me/posts/call-apply-bind-implement/</guid>
      <description>Call、Apply、Bind实现</description>
    </item>
    <item>
      <title>Input中如何处理中文输入防抖</title>
      <link>https://zinkwu.me/posts/chinese-input-debounce/</link>
      <pubDate>Mon, 23 Sep 2019 10:35:18 +0800</pubDate>
      <guid>https://zinkwu.me/posts/chinese-input-debounce/</guid>
      <description>Input中如何处理中文输入防抖</description>
    </item>
    <item>
      <title>这一次，我一定会搞定 This ！</title>
      <link>https://zinkwu.me/posts/about-this/</link>
      <pubDate>Mon, 16 Sep 2019 10:36:19 +0800</pubDate>
      <guid>https://zinkwu.me/posts/about-this/</guid>
      <description>JavaScript中的this规则</description>
    </item>
    <item>
      <title>防抖和节流</title>
      <link>https://zinkwu.me/posts/debounce-throttle/</link>
      <pubDate>Tue, 06 Aug 2019 10:37:38 +0800</pubDate>
      <guid>https://zinkwu.me/posts/debounce-throttle/</guid>
      <description>防抖和节流的代码实现</description>
    </item>
    <item>
      <title>JavaScript的深浅拷贝</title>
      <link>https://zinkwu.me/posts/js-deep-and-shallow-clone/</link>
      <pubDate>Wed, 24 Jul 2019 10:38:27 +0800</pubDate>
      <guid>https://zinkwu.me/posts/js-deep-and-shallow-clone/</guid>
      <description>深拷贝浅拷贝知识点笔记</description>
    </item>
  </channel>
</rss>
